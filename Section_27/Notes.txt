216. Introduction to Version Control and Git

using git in cli 
for version Control
clone repository 
for to fork
make pull request 
merge repository


Version Control
under vc using git 
savepoint no.1
after somelines
savepoint no.2
(second version)
and 
after someline the whole file is screwed up

and now we can rollback to the previous savepoint 
and it can be done using git
and compare the current version to the previous version 
can also be to previous versions 

doing it in locally














215. Version control using git and command line 

goto desktop and then mkdir Story
goto it
touch chapter1.txt 

open it 
open -a chapter1.txt  = works in mac

start chapter1.txt
will work for windows 

creating git local repository
and tracking the file changes

to initialise git 
git init 
Initialized empty Git repository in C:/Users/jrx/OneDrive/Desktop/Story/.git/
now this wont be availble in the 
ls
because it is in the hidden files
and to get it 
ls -a 
now it will be displayed 

.git is there
to track all the changes
commit the changes 
to perform version control

so now the Story directory is the working directory 

to start tracking the changes 
like chapter1.txt 
then add the file to staging area 

Working directory == > staging area 

staging area is an intermediate place where we can pick and choose which  files in the working directory that we want to commit

so to check what is inside my staging area 
use 
git status
shows there are untracked files in red
that are in the working directory but not in the staging area 

to add it to the staging area 
to start tracking changes in it 

git add chapter1.txt

now on 
git status 
it will show that the file is added in the new file

now chapter1.txt is in the staging area 

now committing under version control 

git commit -m
commit : useful in keeping tracks of changes that we made in each commit

and we have to be descriptive between last savepoint and current save point

so commit it like this 
(in present tense)
git commit -m "Complete Chapter 1"

it will give auth error 

git config --global user.name "Your Name"

git config --global user.email "you@example.com"

so now authorize yourself by giving the details so other people can see your commits and identify you as an author 

now to see the logs/commits 
git log 

it will show all the logs 

it has a hash
and this hash uniquely identifies the commit 
and saves the commit

now create 2 more chapters 2 and 3 and fill them with something

can even check it with ls in bash cli

now adding multiple files to the staging area
like this
git add .
now this will say that add all the files in the current directory to add to the staging area

now in git status we can find these two files added in the staging area 

now commiting those files 

git commit -m "complete chapter 2 and 3"

and check again with 
git log

-m flag to specify the commit message


in git log 
we have two commits with different hashes 


git init in working directory
local repository = git repository 
git add to add it staging area 
staging area = intermediate area 

from staging area to git repository
to specify which to ignore and which to be tracked 

so
working directory => Staging Area => Git repository
              git add         git comit

now files are inside the local repository and are given a name through commit message -m

now even if we messed up a file 
using 
git checkout
we can revert back to the last position in our local repository

now imagine if the text is chapter3 is scrambled/not desired 
we can revert back to theprevious version using 
git checkout

just check in git status it shows chapter3 is modified
and it is red = not committed or not inside the staging area 

to compare the differences between current and previous committed files 

for differences 
git diff chapter3.txt

rolling back to the previous version




press q to get out of the pager 


TLDR : Summary

git init = initialise
then authenticate 
git add .
git commit -m "Message flag"
git status 
git log 
q = to end the pager
git diff file_name.exe 
git checkout file_name = revert back to the previous version in the local repository 
start file_name 
ls -a = show hidden files in a directory



















218. Github and remote repositories 

our repo that is hosted on somebody else server or computer 
using github 

push an existing repository onto the remote repository 
1. copy the address of the github repository
https://github.com/jrx100th/Story.git

2. push the existing local repo to Github
git remote add origin https://github.com/jrx100th/Story.git
git push -u origin main


git log has 3 commits currently
now pushing both of these commits to github

to do that we need to create a remote repository
command is = 

git remote add origin https://github.com/jrx100th/Story.git
origin = name of your remote (we can call it any thing)
origin = conventional naming
https://github.com/jrx100th/Story.git = url of the github repository

after this 
git remote add origin https://github.com/jrx100th/Story.git
the remote is created 

now we can push from local repository to the remote repository
remote repository name = origin 

git push -u <remote name> <branch name>

git push -u origin main

-u flag  = links up remote and local repositories
then push it towards to the remote origin and then in the main branch 

main branch = default branch = the first one / first level i guess 

git branch
lists the local branches 
and marks the current one with *
so right now it is * master

now instead of 
git push -u origin main 
use 
git push -u origin master 

and then signin to the account through the verification process.

now the local repository is uploaded to the remote repository to github servers

now the commits pushed to the github page 
and still the branch is master
and the local repository remote is tracked with name origin 

so all the files from local repository will be pushed to github page

now go to insights in the repository and go to networks
if it is a private repo then make it public to enable this feature 

then again 
insights -> network 
comit messages for each of those commits 
for the project 
just like a timeline 

there are creatures that write stories using github 

again in the main page there are commits and the time of the commits 

and we can also see the changes made in the time points 

so now there are 4 stages

working     git   staging    git     local        git      remote 
directory   add    area    commit   repository   push      repository

after few commits 
local repository has a timeline of various commits 
that is called the main branch

main branch = main branch of commits or savepoints (it is sequential)
here in the main branch the main progress is saved 

syncing the local repository to remote repository using git push
and the time line will be pushed from local to remote repo 

in our case 
.git file inside the story directory is the local repo 
and remote repo = github hosts our code and the changes 

TLDR : Summary

git remote add origin "link"

git push -u origin master 
git branch

insights -> network
















219. Gitignore
set rules to prevent committing to local and git repo 

in the desktop create new directory
project 
and create 
file1
file2
file3
secrets

and local setting and user preferences and utility files that shouldnt be uploaded in github 
like .DS_store_files
but these hidden files can be shown in ls -a 

now lets create a hidden file 
touch .gitignore 

the case and wording is a huge deal 

and in ls -a it is visible 

and we can also open it in vs code like this 
start .gitignore

in gitignore we should add the files that our project should ignore when we commit our project to git 

now initialise git
right now it is empty 

git add . 
all the files to the git staging area 

git status = gives the info on the staging area 
all files are added in the staging area 

now i dont want to commit the secrets.txt file 

remove all the files from the staging area 

git rm --cached -r .

means all the files in the current staging area should be removed 
$ git rm --cached -r .
rm '.gitignore'
rm 'file1.txt'
rm 'file2.txt'
rm 'file3.txt'
rm 'secrets.txt'


now in .gitignore we can add the file names that we want to be ignored
to add individual files then add them in new lines 
with the same casing as the name of the file 

in gitignore
# for comment

wild card *
*.txt 

now after asterisk all the mentioned type files will be ignored 
*.txt all the txt extension will be ignored
*.log all the log extension will be ignored

now again adding all the files 
git add .
and 
git status 
now the secrets file is not in the staging area 

perp : No, you generally should not add the .gitignore file itself in the .gitignore file.

now commit to the local repository
now only these file1,2,3 will be in the local repo after commiting

now a new node project 

put the test folder on the desktop 
then in vs code bash terminal 

npm install 

and create a .gitignore here
touch .gitignore 
start .gitignore 

and in gitignore
add the name of the files that needs to be ignored in our node project 

https://github.com/github/gitignore/blob/main/Node.gitignore
here are all the files that we need to add in the gitignore 
such as dependencies, node_modules, .env settings 

so copy all of them and put in the .gitignore file from web 

after that we can add the files that we want git to ignore or gitignored


now in terminal again 

git init 

git add .
now it will show a warning for the format conversion

to add/comit/push it as it is 
git config --global core.autocrlf false

now again 

git add .

git status 
there will be a lot of files 

now commiting it to the local repo from staging area 

now when we upload to the remote repo the files in the gitignore will be ignored 
and it wont be displayed to other collaborators or the people who see the project/repo

so for api keys and secrets 
create a file and add that file in the gitignore

TLDR : Summary

git rm --cached -r .   = remove all files from staging area 












side quest : adding things inside the folders inside the repository

so i created a remote 
git remote add origin "link of subfolder"
git push -u origin master 
now new error 
repo does not exist 

learnings from perp
. Git remotes must be set to the root repository URL, not to subfolders or paths inside the repo.'

so now redemption 

remove the incorrectly added origin 
git remote remove origin 

now add the repository url 

git remote add origin "url"
in my case 
git remote add "https://github.com/jrx100th/Web_Dev_Course_Content/"

now 

git log --stat 
shows the files in the last commit 

seems like i need to wait a while to have more control 
i will come back after learning some stuff.

so coming back
git remote remove origin 
and this will remove the existing remote origin 
and i mean the github url that is in the 
name of origin 

to check them again 

git remote -v 
should remove the specified url in the origin

or else 

git remote show origin 
it should give an error that the remote name does not appear in the git repo 

just entered the void called after 
some pos amend
lesson learned 
just dont type everything from internet in condole this is 2025 between
:q! enter 
to exit 

git commit --amend
will enter the default text editor (in my case vim)

back to main game 

















220. Cloning

cloning a remote repository on github to pull it onto local repository 

command 
git clone 

to pull all version and all commits on a remote repo 
and to store files in your won working directory 
allows us to build on existing code 
so no need to clone it after regular development
and we can continue in local repo

copy and update open source projects 

practice
clone some online repo and run them locally to try it 

command

git clone url
url from git hub complete clone

Quake III Arean game in web browser

in the github 
get the link 
https://github.com/inolen/quakejs.git

now simply 
git clone https://github.com/inolen/quakejs.git
now it is located in the current directory

check the folder name 
through ls
cd quakejs

and then inside the directory 
install all the packages 
npm install

their content.quakejs.com as the content server 
echo '{ "content": "content.quakejs.com" }' > bin/web.json

then run the server just like this 
from the readme file 

node bin/web.js --config ./web.json

now webserver is listening on port 8080

for some security reason it is not working 

now cloning wordle mastermind game from here  
https://github.com/clupasq/word-mastermind.git

just go back to the parent folder and then clone and get the folder
just the routine 
npm install 

http://localhost:3333/
now it is in the browser

now we can change the colors and change anything since we have this in our local repo(not yet)
and we can change anything 

improve your own version 

so when someone says open source 
we can mess up their code
and can call it contributing to open source

and more of those open source projects here 

there is even brave browser as open source 
with a concept 

to make contributions
i need to learn more about 
pull requests 
branches and merging 


TLDR : Summary
git clone URL 
and change others code and experiment and understand
and just read their respective readme files 

cloning is a read only operation
so the owner wont be notified when other clone it 



















221. Branching and Merging 

how to use branches to develop features ad collaborate on a codebase

lets say we have version 1 and 2 = 2 commits in local repo
so after the second commit we can create a side branch 

by 
git branch name-of-branch
and simultaneously we can work with the main branch
and also on the experimental branch 

and commiting stuff in exp branch also 
and experiment branch can have new features 

and the two branches can be developed in parallel

so if we like the side branch the experiment one 
then we can merge the branch to the main branch

using 
git merge name-of-branch 

then again we can work with the main branch 

for large projects there will be multiple features and there will be multiple branches 
like for developing features and fixing bugs 

so to not break the main branch we have multiple branches 

and again get back to the main branch for execution and deployment 


now going back to the story directory 
and the commits can be seen using git log 
and also has in the remote 
origin

now making a new branch 
git branch alien-plot-txt

checking the existing branches
git branch 
alien-plot-txt 
*master 

now im on master indicated by *

we can switch to alien-plot-txt 
by simply writing 
git checkout "alien-plot-txt"
Switched to branch 'alien-plot-txt'

changed some text in chapter1, chapter2

so before committing 

we have to 
git add . 
git commit -m "Modify chapter 1 and 2 to have alien theme"
now are inserted into local repo 
and now in git log there will be new commits in the new branch
HEAD -> alien-plot-txt 

now going back to the main branch 

git checkout master 

switched back to the master branch 

wow now even if i open those chapter 1 and chapter2 and 
they look like they have not been unchanged 

so just revert back to differnt branches using 
git checkout branch-name 

now creating a new branch called chapter4.txt

now git add .
and git commit -m 

our local files just change as we switch branches 

now merging the alien-plot 
now putting it back into the main branch 
now goto 
git checkout master 
and while being on the main branch 
merge the alien-plot-txt 

using 
git merge alien-plot-txt

now it enters the void 
then it will open Vim = text editor 
it allows us to add a merge message if we want 

but we are gonna leave it empty 
and 
write 
:q!
to save and quit

now the changes from alien plot 

git branch 
still two branches 
master and alien-plot

but in git log there is merge branch alien 

now git push to remote (origin)

git push origin master -u 

and check in the github online
then the branch can be seen(visualized) in the master 
in the story repository in the commit section all the commits can be seen there 

so now merged the previous version will be removed from the main branch and then will be replaced with the merged branch 

TLDR : Summary

git branch name-of-branch    making a new branch
git merge name-of-branch     (= from main )
git branch                   = shows existing branches 
git checkout alien-plot-txt  = switches to this branch 

again the routine git add . + git commit -m in the new branch
now check git log 

git push origin master -u (to push to remote)


























223. Forking and Pull requests 

git clone =  simple cloning 

now copying the entire copy to our github account and make changes to it 
it is called forking 

fork a remote repo then we can do stuff to the copy 
perp : Forking on GitHub means creating a personal copy of someone else's repository under your own GitHub account. 
       This forked repository is completely independent; you can make changes freely in your copy without affecting the original project (called the "upstream" repository).

so it is a write access permission 
for an open source repository 
git clone , work on it locally and then push the improvements 

open source collaboration 
through forking and pull requests 

forked to make a copy in github account 
git clone to make it onto the local repo (device)
then add some features 
git push to remote repo 

and to add those new features in the original 
we have to make a pull request 
if we are not one of the trusted collaborators(people with read and write access)

pull request = merge to your remote repo 
we can pull the changes over = so it is called pull request 

accepting means = merging others repo with our own 

people who forked can be seen in the networks section of insights 

pull request is basically a mere suggestion

and in the main account the pull request is available.

now the owner has to hit merge pull request 
and confirm merge 
now the latest commit is from fork 













to remove git 


to see in where else git is there 
find . -name ".git"

rename the local git master to main 
git branch -m main

